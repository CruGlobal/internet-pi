name: Deploy to Raspberry Pi

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure Python and pip are installed
        run: |
          if ! command -v python3 &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
          else
            echo "Python3 is already installed"
          fi
          
          if ! command -v pip3 &> /dev/null; then
            sudo apt-get install -y python3-pip
          else
            echo "pip3 is already installed"
          fi

      - name: Install Ansible
        run: |
          pip install --user ansible
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Docker
        run: |
          # Check if Docker is already installed
          if ! command -v docker &> /dev/null; then
            # Install Docker if not present
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
          fi
          
          # Ensure Docker daemon is running
          sudo systemctl start docker || true
          sudo systemctl enable docker || true
          
          # Add current user to docker group if not already added
          if ! groups $USER | grep -q docker; then
            sudo usermod -aG docker $USER
            # Apply group changes without requiring logout
            newgrp docker || true
          fi
          
          # Verify Docker is working
          docker info || true

      - name: Fix DNS resolvers
        run: |
          # Check if /etc/resolv.conf is a symlink (systemd-resolved)
          if [ -L /etc/resolv.conf ]; then
            echo "Skipping DNS fix: systemd-resolved is managing DNS."
          else
            echo -e 'nameserver 8.8.8.8\nnameserver 8.8.4.4' | sudo tee /etc/resolv.conf > /dev/null
          fi
          sudo systemctl restart docker || true

      - name: Prepare environment
        run: |
          # Create and set permissions for required directories
          sudo mkdir -p $HOME/pi-hole
          sudo mkdir -p $HOME/internet-monitoring
          sudo chown -R $USER:$USER $HOME/pi-hole
          sudo chown -R $USER:$USER $HOME/internet-monitoring
          sudo chmod 755 $HOME/pi-hole
          sudo chmod 755 $HOME/internet-monitoring

          # Create pi user if it doesn't exist
          id -u pi &>/dev/null || sudo adduser pi --disabled-password --gecos ""
          sudo usermod -aG docker pi
          sudo usermod -aG docker $USER

          # Create config directory and write Google Cloud credentials
          mkdir -p config
          echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > config/credentials.json
          chmod 600 config/credentials.json

          echo -e '[internet_pi]\n127.0.0.1 ansible_connection=local ansible_user=$USER' > inventory.ini

          # Create config.yml with custom metrics enabled
          cp example.config.yml config.yml
          
          # Remove any existing custom metrics configuration
          sed -i '/^# Custom Metrics configuration/,/^$/d' config.yml
          sed -i '/^custom_metrics_enable:/,/^$/d' config.yml
          
          # Append custom metrics configuration
          {
            echo ""
            echo "# Custom Metrics configuration"
            echo "custom_metrics_enable: true"
            echo "custom_metrics_bigquery_project: \"${{ secrets.BIGQUERY_PROJECT }}\""
            echo "custom_metrics_location: \"${{ secrets.METRICS_LOCATION }}\""
            echo "custom_metrics_prometheus_url: \"http://prometheus:9090\""
            echo "custom_metrics_collection_interval: \"1h\""
            echo "custom_metrics_credentials_path: \"config/credentials.json\""
          } >> config.yml

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Run Ansible playbook
        run: ~/.local/bin/ansible-playbook main.yml
        
      - name: list containers
        run: docker ps 
