name: Deploy to Raspberry Pi

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure Python and pip are installed
        run: |
          if ! command -v python3 &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
          else
            echo "Python3 is already installed"
          fi
          
          if ! command -v pip3 &> /dev/null; then
            sudo apt-get install -y python3-pip
          else
            echo "pip3 is already installed"
          fi

      - name: Install Ansible
        run: |
          pip install --user ansible
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Docker
        run: |
          # Check if Docker is already installed
          if ! command -v docker &> /dev/null; then
            # Install Docker if not present
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
          fi
          
          # Check if Docker daemon is running
          if ! systemctl is-active --quiet docker; then
            sudo systemctl start docker || true
            sudo systemctl enable docker || true
          else
            echo "Docker daemon is already running"
          fi
          
          # Check if user is in docker group
          if ! groups $USER | grep -q docker; then
            sudo usermod -aG docker $USER
            # Apply group changes without requiring logout
            newgrp docker || true
          else
            echo "User is already in docker group"
          fi
          
          # Verify Docker is working
          docker info || true

      - name: Fix DNS resolvers
        run: |
          # Check if /etc/resolv.conf is a symlink (systemd-resolved)
          if [ -L /etc/resolv.conf ]; then
            echo "Skipping DNS fix: systemd-resolved is managing DNS."
          else
            # Check if resolv.conf needs to be updated
            if ! grep -q "nameserver 8.8.8.8" /etc/resolv.conf; then
              echo -e 'nameserver 8.8.8.8\nnameserver 8.8.4.4' | sudo tee /etc/resolv.conf > /dev/null
              sudo systemctl restart docker || true
            else
              echo "DNS resolvers are already configured"
            fi
          fi

      - name: Prepare environment
        run: |
          # Check if directories exist and have correct permissions
          for dir in "$HOME/pi-hole" "$HOME/internet-monitoring"; do
            if [ ! -d "$dir" ]; then
              sudo mkdir -p "$dir"
              sudo chown -R $USER:$USER "$dir"
              sudo chmod 755 "$dir"
            elif [ "$(stat -c '%U:%G' "$dir")" != "$USER:$USER" ]; then
              sudo chown -R $USER:$USER "$dir"
            elif [ "$(stat -c '%a' "$dir")" != "755" ]; then
              sudo chmod 755 "$dir"
            else
              echo "Directory $dir already exists with correct permissions"
            fi
          done

          # Check if pi user exists
          if ! id -u pi &>/dev/null; then
            sudo adduser pi --disabled-password --gecos ""
          else
            echo "pi user already exists"
          fi

          # Check if users are in docker group
          for user in pi $USER; do
            if ! groups $user | grep -q docker; then
              sudo usermod -aG docker $user
            else
              echo "User $user is already in docker group"
            fi
          done

          # Create config directory and write Google Cloud credentials
          mkdir -p config
          echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > config/credentials.json
          chmod 600 config/credentials.json

          # Create inventory with actual username and sudo configuration
          echo -e "[internet_pi]\n127.0.0.1 ansible_connection=local ansible_user=$USER ansible_become=true ansible_become_method=sudo" > inventory.ini

          # Create config.yml with custom metrics enabled
          cp example.config.yml config.yml
          
          # Remove any existing custom metrics configuration
          sed -i '/^# Custom Metrics configuration/,/^$/d' config.yml
          sed -i '/^custom_metrics_enable:/,/^$/d' config.yml
          
          # Append custom metrics configuration
          {
            echo ""
            echo "# Custom Metrics configuration"
            echo "custom_metrics_enable: true"
            echo "custom_metrics_bigquery_project: \"${{ secrets.BIGQUERY_PROJECT }}\""
            echo "custom_metrics_location: \"${{ secrets.METRICS_LOCATION }}\""
            echo "custom_metrics_prometheus_url: \"http://prometheus:9090\""
            echo "custom_metrics_collection_interval: \"1h\""
            echo "custom_metrics_credentials_path: \"config/credentials.json\""
          } >> config.yml

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Configure sudo access for runner
        run: |
          echo "$USER ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/$USER
          sudo chmod 0440 /etc/sudoers.d/$USER

      - name: Run Ansible playbook
        run: ~/.local/bin/ansible-playbook main.yml -e "runner_user=$USER" -i inventory.ini
        
      - name: list containers
        run: docker ps
